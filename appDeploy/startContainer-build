#!/bin/bash

# Fonction d'affichage de l'aide
function help() {
  echo "Utilisation : startContainer [chemin/vers/config.cfg]"
}

# Récupérer le chemin du script
SCRIPT_DIR="$(cd "$(dirname "$0")" && pwd)"

# Fonction de test des chemins
function testPath() {
  if [ "$1" = "" ] ; then echo "Le fichier n'existe pas." ; exit 1 ; fi

  case "$1" in
    /*) if [ ! -f "$1" ] ; then echo "Le fichier $1 n'existe pas." ; exit 1 ; fi ;;
    *) if [ ! -f "${SCRIPT_DIR}/$1" ] ; then echo "Le fichier ${SCRIPT_DIR}/$1 n'existe pas." ; exit 1 ; fi ;;
  esac
}

# Vérifier l'argument contenant le fichier de configuration
if [ "${#1}" -lt 1 ] ; then
  help
  exit 0
fi
# Utiliser le chemin absolu
CONFIG_FILE="$(readlink -f $1)"
if [ "${CONFIG_FILE}" = "" ] ; then
  help
  exit 1
else
  testPath "${CONFIG_FILE}"
fi
CONFIG_DIR="$(dirname ${CONFIG_FILE})"

# Récupérer les champs du fichier de config
. "${CONFIG_DIR}/config.cfg"
if [ $? -ne 0 ] ; then echo "Erreur lors de l'importation de config.cfg" ; exit 1 ; fi

# Verifier si toutes les variables sont presentes
if [ ${#IMAGE} -le 0 ] ; then echo "Erreur variable IMAGE incorrecte" ; exit 1 ; fi
if [ ${#TAG} -le 0 ] ; then TAG="latest" ; fi
if [ ${#BUILD_PATH} -le 0 ] ; then echo "Erreur variable BUILD_PATH incorrecte" ; exit 1 ; fi

# Vérifier si le chemin vers "BUILD_PATH" existe
BUILD_PATH=$(readlink -f ${BUILD_PATH})
#case "${BUILD_PATH}" in
#  /*) BUILD_PATH="${BUILD_PATH}" ; if [ ! -d "${BUILD_PATH}" ] ; then echo "Le fichier ${BUILD_PATH} n'existe pas." ; exit 1 ; fi ;;
#  *) BUILD_PATH="${CONFIG_DIR}/${BUILD_PATH}" ; if [ ! -d "${BUILD_PATH}" ] ; then echo "Le fichier ${BUILD_PATH} n'existe pas." ; exit 1 ; fi ;;
#esac

# Vérifier s'il y a bien un Dockerfile dans "BUILD_PATH"
if [ ! -f "${BUILD_PATH}/Dockerfile" ] ; then
  echo "Le répertoire ${BUILD_PATH} ne contient pas de fichier Dockerfile !"
  exit 1
fi



#
# Utiliser le fichier "build/Dockerfile" pour construire l'image
#
BUILD="docker build --compress --progress --rm"

if [ ${#LABEL} -gt 0 ] ; then
  BUILD+=" --label \"${LABEL}\""
fi

BUILD+=" --tag ${IMAGE}:${TAG}"
BUILD+=" ${BUILD_PATH}"

echo "${BUILD}"
eval ${BUILD}

if [ $? -ne 0 ] ; then
  echo "Impossible de créer l'image !"
  exit 1
else
  printf "Image crée : "
  docker images -q ${IMAGE}:${TAG}
  echo
fi
